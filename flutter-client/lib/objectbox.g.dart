// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/chat.dart';
import 'models/contact.dart';
import 'models/key_pair.dart';
import 'models/media.dart';
import 'models/message.dart';
import 'models/user_profile.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 1337025690057856245),
    name: 'Chat',
    lastPropertyId: const obx_int.IdUid(3, 4400851756592350348),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3440062547498789952),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2861812896462435848),
        name: 'isGroup',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4400851756592350348),
        name: 'lastMessageId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 4101815200049755604),
        relationTarget: 'Message',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 8658226692143748701),
        name: 'participants',
        targetId: const obx_int.IdUid(2, 8860022648702278594),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 8860022648702278594),
    name: 'Contact',
    lastPropertyId: const obx_int.IdUid(10, 2859119375769512033),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6807388230041640338),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7310131879461127815),
        name: 'userId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3577499306713455179),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8766882052836289647),
        name: 'username',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4035125139670576842),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2604883795922569345),
        name: 'picture',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 233397636148460832),
        name: 'edPublicKey',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 5639603100079095736),
        name: 'xPublicKey',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2859119375769512033),
        name: 'keyId',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 2142265840162897165),
        name: 'chats',
        targetId: const obx_int.IdUid(1, 1337025690057856245),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 4609714583072711409),
    name: 'Media',
    lastPropertyId: const obx_int.IdUid(5, 2434693921562339121),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8714221648926710376),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 603010768409058860),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3472514127405243191),
        name: 'path',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8211448478424500144),
        name: 'aesKey',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2434693921562339121),
        name: 'messageId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 5120665967884567529),
        relationTarget: 'Message',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 8463423510263441391),
    name: 'Message',
    lastPropertyId: const obx_int.IdUid(18, 7520915824275254956),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8507035082203688487),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3926228047062331693),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4108775256142254029),
        name: 'aesKey',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5277026443120811331),
        name: 'isDeleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6840772955091160550),
        name: 'timestamp',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 1867049725602764148),
        name: 'chatId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 2724254327979532706),
        relationTarget: 'Chat',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 679020549650639256),
        name: 'senderId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 3888704798474555359),
        relationTarget: 'Contact',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4777081500356602948),
        name: 'isReaded',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2955556574461992481),
        name: 'receiverId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 3799783082260503699),
        relationTarget: 'Contact',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 4924803353812391200),
        name: 'isSent',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 5093203809859198811),
        name: 'aesMac',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 3366299066654596536),
        name: 'aesNonce',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 5250657738169978063),
        name: 'aesKeyMac',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 6504229048746825044),
        name: 'aesKeyNonce',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 7520915824275254956),
        name: 'remoteRef',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(name: 'media', srcEntity: 'Media', srcField: ''),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 1795131808868278735),
    name: 'KeyPairEntity',
    lastPropertyId: const obx_int.IdUid(21, 1329338538276884659),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1569910329809234115),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6802810917270624544),
        name: 'edPubKey',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 1005144797929661262),
        name: 'xPubKey',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 4187619553012541561),
        name: 'validUntil',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 8668855363442525943),
        name: 'edPrivCipher',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 6918019105086899516),
        name: 'edPrivNonce',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 1177821759217804225),
        name: 'edPrivMac',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 8563809133577569837),
        name: 'xPrivCipher',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 7673704538669873998),
        name: 'xPrivNonce',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 8935914252072665242),
        name: 'xPrivMac',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 5328346794723316805),
        name: 'isActive',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 1329338538276884659),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 7045419605744524882),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(10, 6631596587540531045),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3093629123023994959),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5065245366675790092),
        name: 'user_id',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1226704419076527195),
        name: 'username',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7034397215568667722),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1622306402948922762),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8652455268918202265),
        name: 'authToken',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4956726452226420435),
        name: 'emailVerifiedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3423605999123679773),
        name: 'lastConnectionAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3114875574533706547),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6631596587540531045),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(7, 7045419605744524882),
    lastIndexId: const obx_int.IdUid(5, 3799783082260503699),
    lastRelationId: const obx_int.IdUid(2, 2142265840162897165),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [2558204468876435374],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      4763914241320459117,
      5266469167011914504,
      5331843548454284366,
      2458521745127537958,
      5309631684171780391,
      7121526617231561492,
      6798693158009423984,
      2775834557522430804,
      3254522172687858101,
      6266159676426650668,
      1918983590515212166,
      9083402213374567839,
      4984172858547105379,
      5575682065709418465,
      8281807281394662704,
      9114590475711694307,
      2300514077804492313,
      4165597461346043117,
      3693218642746201081,
      4874783288855113181,
      4817421810348312522,
      5074577998980240299,
      4400067038102652672,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Chat: obx_int.EntityDefinition<Chat>(
      model: _entities[0],
      toOneRelations: (Chat object) => [object.lastMessage],
      toManyRelations: (Chat object) => {
        obx_int.RelInfo<Chat>.toMany(1, object.id): object.participants,
      },
      getId: (Chat object) => object.id,
      setId: (Chat object, int id) {
        object.id = id;
      },
      objectToFB: (Chat object, fb.Builder fbb) {
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addBool(1, object.isGroup);
        fbb.addInt64(2, object.lastMessage.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final isGroupParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          6,
          false,
        );
        final object = Chat(id: idParam, isGroup: isGroupParam);
        object.lastMessage.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        object.lastMessage.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Chat>(
          object.participants,
          store,
          obx_int.RelInfo<Chat>.toMany(1, object.id),
        );
        return object;
      },
    ),
    Contact: obx_int.EntityDefinition<Contact>(
      model: _entities[1],
      toOneRelations: (Contact object) => [],
      toManyRelations: (Contact object) => {
        obx_int.RelInfo<Contact>.toMany(2, object.id): object.chats,
      },
      getId: (Contact object) => object.id,
      setId: (Contact object, int id) {
        object.id = id;
      },
      objectToFB: (Contact object, fb.Builder fbb) {
        final emailOffset = fbb.writeString(object.email);
        final usernameOffset = fbb.writeString(object.username);
        final nameOffset = fbb.writeString(object.name);
        final pictureOffset = fbb.writeString(object.picture);
        final edPublicKeyOffset = fbb.writeString(object.edPublicKey);
        final xPublicKeyOffset = fbb.writeString(object.xPublicKey);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.userId);
        fbb.addOffset(2, emailOffset);
        fbb.addOffset(3, usernameOffset);
        fbb.addOffset(4, nameOffset);
        fbb.addOffset(6, pictureOffset);
        fbb.addOffset(7, edPublicKeyOffset);
        fbb.addOffset(8, xPublicKeyOffset);
        fbb.addInt64(9, object.keyId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final userIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final usernameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final edPublicKeyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final xPublicKeyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final keyIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final pictureParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final object = Contact(
          id: idParam,
          userId: userIdParam,
          email: emailParam,
          username: usernameParam,
          name: nameParam,
          edPublicKey: edPublicKeyParam,
          xPublicKey: xPublicKeyParam,
          keyId: keyIdParam,
          picture: pictureParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Contact>(
          object.chats,
          store,
          obx_int.RelInfo<Contact>.toMany(2, object.id),
        );
        return object;
      },
    ),
    Media: obx_int.EntityDefinition<Media>(
      model: _entities[2],
      toOneRelations: (Media object) => [object.message],
      toManyRelations: (Media object) => {},
      getId: (Media object) => object.id,
      setId: (Media object, int id) {
        object.id = id;
      },
      objectToFB: (Media object, fb.Builder fbb) {
        final typeOffset = fbb.writeString(object.type);
        final pathOffset = fbb.writeString(object.path);
        final aesKeyOffset = fbb.writeString(object.aesKey);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, typeOffset);
        fbb.addOffset(2, pathOffset);
        fbb.addOffset(3, aesKeyOffset);
        fbb.addInt64(4, object.message.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final pathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final aesKeyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = Media(
          id: idParam,
          type: typeParam,
          path: pathParam,
          aesKey: aesKeyParam,
        );
        object.message.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.message.attach(store);
        return object;
      },
    ),
    Message: obx_int.EntityDefinition<Message>(
      model: _entities[3],
      toOneRelations: (Message object) => [
        object.chat,
        object.sender,
        object.receiver,
      ],
      toManyRelations: (Message object) => {
        obx_int.RelInfo<Media>.toOneBacklink(
          5,
          object.id,
          (Media srcObject) => srcObject.message,
        ): object.media,
      },
      getId: (Message object) => object.id,
      setId: (Message object, int id) {
        object.id = id;
      },
      objectToFB: (Message object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        final aesKeyOffset = fbb.writeString(object.aesKey);
        final aesMacOffset = fbb.writeString(object.aesMac);
        final aesNonceOffset = fbb.writeString(object.aesNonce);
        final aesKeyMacOffset = fbb.writeString(object.aesKeyMac);
        final aesKeyNonceOffset = fbb.writeString(object.aesKeyNonce);
        fbb.startTable(19);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addOffset(2, aesKeyOffset);
        fbb.addBool(4, object.isDeleted);
        fbb.addInt64(5, object.timestamp.millisecondsSinceEpoch);
        fbb.addInt64(6, object.chat.targetId);
        fbb.addInt64(7, object.sender.targetId);
        fbb.addBool(8, object.isReaded);
        fbb.addInt64(9, object.receiver.targetId);
        fbb.addBool(11, object.isSent);
        fbb.addOffset(12, aesMacOffset);
        fbb.addOffset(13, aesNonceOffset);
        fbb.addOffset(14, aesKeyMacOffset);
        fbb.addOffset(15, aesKeyNonceOffset);
        fbb.addInt64(17, object.remoteRef);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final aesMacParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final aesNonceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final aesKeyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final aesKeyMacParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 32, '');
        final aesKeyNonceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 34, '');
        final isReadedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          20,
          false,
        );
        final isDeletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final remoteRefParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          38,
          0,
        );
        final isSentParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          26,
          false,
        );
        final timestampParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final object = Message(
          id: idParam,
          content: contentParam,
          aesMac: aesMacParam,
          aesNonce: aesNonceParam,
          aesKey: aesKeyParam,
          aesKeyMac: aesKeyMacParam,
          aesKeyNonce: aesKeyNonceParam,
          isReaded: isReadedParam,
          isDeleted: isDeletedParam,
          remoteRef: remoteRefParam,
          isSent: isSentParam,
          timestamp: timestampParam,
        );
        object.chat.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.chat.attach(store);
        object.sender.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.sender.attach(store);
        object.receiver.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        object.receiver.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<Message>(
          object.media,
          store,
          obx_int.RelInfo<Media>.toOneBacklink(
            5,
            object.id,
            (Media srcObject) => srcObject.message,
          ),
        );
        return object;
      },
    ),
    KeyPairEntity: obx_int.EntityDefinition<KeyPairEntity>(
      model: _entities[4],
      toOneRelations: (KeyPairEntity object) => [],
      toManyRelations: (KeyPairEntity object) => {},
      getId: (KeyPairEntity object) => object.id,
      setId: (KeyPairEntity object, int id) {
        object.id = id;
      },
      objectToFB: (KeyPairEntity object, fb.Builder fbb) {
        final edPubKeyOffset = fbb.writeString(object.edPubKey);
        final xPubKeyOffset = fbb.writeString(object.xPubKey);
        final edPrivCipherOffset = fbb.writeString(object.edPrivCipher);
        final edPrivNonceOffset = fbb.writeString(object.edPrivNonce);
        final edPrivMacOffset = fbb.writeString(object.edPrivMac);
        final xPrivCipherOffset = fbb.writeString(object.xPrivCipher);
        final xPrivNonceOffset = fbb.writeString(object.xPrivNonce);
        final xPrivMacOffset = fbb.writeString(object.xPrivMac);
        fbb.startTable(22);
        fbb.addInt64(0, object.id);
        fbb.addOffset(8, edPubKeyOffset);
        fbb.addOffset(10, xPubKeyOffset);
        fbb.addInt64(12, object.validUntil.millisecondsSinceEpoch);
        fbb.addOffset(13, edPrivCipherOffset);
        fbb.addOffset(14, edPrivNonceOffset);
        fbb.addOffset(15, edPrivMacOffset);
        fbb.addOffset(16, xPrivCipherOffset);
        fbb.addOffset(17, xPrivNonceOffset);
        fbb.addOffset(18, xPrivMacOffset);
        fbb.addBool(19, object.isActive);
        fbb.addInt64(20, object.createdAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final edPubKeyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final edPrivCipherParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final edPrivNonceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 32, '');
        final edPrivMacParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 34, '');
        final xPubKeyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final xPrivCipherParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 36, '');
        final xPrivNonceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 38, '');
        final xPrivMacParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 40, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0),
        );
        final validUntilParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0),
        );
        final isActiveParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          42,
          false,
        );
        final object = KeyPairEntity(
          edPubKey: edPubKeyParam,
          edPrivCipher: edPrivCipherParam,
          edPrivNonce: edPrivNonceParam,
          edPrivMac: edPrivMacParam,
          xPubKey: xPubKeyParam,
          xPrivCipher: xPrivCipherParam,
          xPrivNonce: xPrivNonceParam,
          xPrivMac: xPrivMacParam,
          createdAt: createdAtParam,
          validUntil: validUntilParam,
          isActive: isActiveParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

        return object;
      },
    ),
    User: obx_int.EntityDefinition<User>(
      model: _entities[5],
      toOneRelations: (User object) => [],
      toManyRelations: (User object) => {},
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        final usernameOffset = fbb.writeString(object.username);
        final nameOffset = fbb.writeString(object.name);
        final emailOffset = fbb.writeString(object.email);
        final authTokenOffset = fbb.writeString(object.authToken);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.user_id);
        fbb.addOffset(2, usernameOffset);
        fbb.addOffset(3, nameOffset);
        fbb.addOffset(4, emailOffset);
        fbb.addOffset(5, authTokenOffset);
        fbb.addInt64(6, object.emailVerifiedAt?.millisecondsSinceEpoch);
        fbb.addInt64(7, object.lastConnectionAt?.millisecondsSinceEpoch);
        fbb.addInt64(8, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(9, object.updatedAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final emailVerifiedAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final lastConnectionAtValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final user_idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final usernameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final authTokenParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final emailVerifiedAtParam = emailVerifiedAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(emailVerifiedAtValue);
        final lastConnectionAtParam = lastConnectionAtValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(lastConnectionAtValue);
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
        );
        final object = User(
          id: idParam,
          user_id: user_idParam,
          username: usernameParam,
          name: nameParam,
          email: emailParam,
          authToken: authTokenParam,
          emailVerifiedAt: emailVerifiedAtParam,
          lastConnectionAt: lastConnectionAtParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Chat] entity fields to define ObjectBox queries.
class Chat_ {
  /// See [Chat.id].
  static final id = obx.QueryIntegerProperty<Chat>(_entities[0].properties[0]);

  /// See [Chat.isGroup].
  static final isGroup = obx.QueryBooleanProperty<Chat>(
    _entities[0].properties[1],
  );

  /// See [Chat.lastMessage].
  static final lastMessage = obx.QueryRelationToOne<Chat, Message>(
    _entities[0].properties[2],
  );

  /// see [Chat.participants]
  static final participants = obx.QueryRelationToMany<Chat, Contact>(
    _entities[0].relations[0],
  );
}

/// [Contact] entity fields to define ObjectBox queries.
class Contact_ {
  /// See [Contact.id].
  static final id = obx.QueryIntegerProperty<Contact>(
    _entities[1].properties[0],
  );

  /// See [Contact.userId].
  static final userId = obx.QueryIntegerProperty<Contact>(
    _entities[1].properties[1],
  );

  /// See [Contact.email].
  static final email = obx.QueryStringProperty<Contact>(
    _entities[1].properties[2],
  );

  /// See [Contact.username].
  static final username = obx.QueryStringProperty<Contact>(
    _entities[1].properties[3],
  );

  /// See [Contact.name].
  static final name = obx.QueryStringProperty<Contact>(
    _entities[1].properties[4],
  );

  /// See [Contact.picture].
  static final picture = obx.QueryStringProperty<Contact>(
    _entities[1].properties[5],
  );

  /// See [Contact.edPublicKey].
  static final edPublicKey = obx.QueryStringProperty<Contact>(
    _entities[1].properties[6],
  );

  /// See [Contact.xPublicKey].
  static final xPublicKey = obx.QueryStringProperty<Contact>(
    _entities[1].properties[7],
  );

  /// See [Contact.keyId].
  static final keyId = obx.QueryIntegerProperty<Contact>(
    _entities[1].properties[8],
  );

  /// see [Contact.chats]
  static final chats = obx.QueryRelationToMany<Contact, Chat>(
    _entities[1].relations[0],
  );
}

/// [Media] entity fields to define ObjectBox queries.
class Media_ {
  /// See [Media.id].
  static final id = obx.QueryIntegerProperty<Media>(_entities[2].properties[0]);

  /// See [Media.type].
  static final type = obx.QueryStringProperty<Media>(
    _entities[2].properties[1],
  );

  /// See [Media.path].
  static final path = obx.QueryStringProperty<Media>(
    _entities[2].properties[2],
  );

  /// See [Media.aesKey].
  static final aesKey = obx.QueryStringProperty<Media>(
    _entities[2].properties[3],
  );

  /// See [Media.message].
  static final message = obx.QueryRelationToOne<Media, Message>(
    _entities[2].properties[4],
  );
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// See [Message.id].
  static final id = obx.QueryIntegerProperty<Message>(
    _entities[3].properties[0],
  );

  /// See [Message.content].
  static final content = obx.QueryStringProperty<Message>(
    _entities[3].properties[1],
  );

  /// See [Message.aesKey].
  static final aesKey = obx.QueryStringProperty<Message>(
    _entities[3].properties[2],
  );

  /// See [Message.isDeleted].
  static final isDeleted = obx.QueryBooleanProperty<Message>(
    _entities[3].properties[3],
  );

  /// See [Message.timestamp].
  static final timestamp = obx.QueryDateProperty<Message>(
    _entities[3].properties[4],
  );

  /// See [Message.chat].
  static final chat = obx.QueryRelationToOne<Message, Chat>(
    _entities[3].properties[5],
  );

  /// See [Message.sender].
  static final sender = obx.QueryRelationToOne<Message, Contact>(
    _entities[3].properties[6],
  );

  /// See [Message.isReaded].
  static final isReaded = obx.QueryBooleanProperty<Message>(
    _entities[3].properties[7],
  );

  /// See [Message.receiver].
  static final receiver = obx.QueryRelationToOne<Message, Contact>(
    _entities[3].properties[8],
  );

  /// See [Message.isSent].
  static final isSent = obx.QueryBooleanProperty<Message>(
    _entities[3].properties[9],
  );

  /// See [Message.aesMac].
  static final aesMac = obx.QueryStringProperty<Message>(
    _entities[3].properties[10],
  );

  /// See [Message.aesNonce].
  static final aesNonce = obx.QueryStringProperty<Message>(
    _entities[3].properties[11],
  );

  /// See [Message.aesKeyMac].
  static final aesKeyMac = obx.QueryStringProperty<Message>(
    _entities[3].properties[12],
  );

  /// See [Message.aesKeyNonce].
  static final aesKeyNonce = obx.QueryStringProperty<Message>(
    _entities[3].properties[13],
  );

  /// See [Message.remoteRef].
  static final remoteRef = obx.QueryIntegerProperty<Message>(
    _entities[3].properties[14],
  );

  /// see [Message.media]
  static final media = obx.QueryBacklinkToMany<Media, Message>(Media_.message);
}

/// [KeyPairEntity] entity fields to define ObjectBox queries.
class KeyPairEntity_ {
  /// See [KeyPairEntity.id].
  static final id = obx.QueryIntegerProperty<KeyPairEntity>(
    _entities[4].properties[0],
  );

  /// See [KeyPairEntity.edPubKey].
  static final edPubKey = obx.QueryStringProperty<KeyPairEntity>(
    _entities[4].properties[1],
  );

  /// See [KeyPairEntity.xPubKey].
  static final xPubKey = obx.QueryStringProperty<KeyPairEntity>(
    _entities[4].properties[2],
  );

  /// See [KeyPairEntity.validUntil].
  static final validUntil = obx.QueryDateProperty<KeyPairEntity>(
    _entities[4].properties[3],
  );

  /// See [KeyPairEntity.edPrivCipher].
  static final edPrivCipher = obx.QueryStringProperty<KeyPairEntity>(
    _entities[4].properties[4],
  );

  /// See [KeyPairEntity.edPrivNonce].
  static final edPrivNonce = obx.QueryStringProperty<KeyPairEntity>(
    _entities[4].properties[5],
  );

  /// See [KeyPairEntity.edPrivMac].
  static final edPrivMac = obx.QueryStringProperty<KeyPairEntity>(
    _entities[4].properties[6],
  );

  /// See [KeyPairEntity.xPrivCipher].
  static final xPrivCipher = obx.QueryStringProperty<KeyPairEntity>(
    _entities[4].properties[7],
  );

  /// See [KeyPairEntity.xPrivNonce].
  static final xPrivNonce = obx.QueryStringProperty<KeyPairEntity>(
    _entities[4].properties[8],
  );

  /// See [KeyPairEntity.xPrivMac].
  static final xPrivMac = obx.QueryStringProperty<KeyPairEntity>(
    _entities[4].properties[9],
  );

  /// See [KeyPairEntity.isActive].
  static final isActive = obx.QueryBooleanProperty<KeyPairEntity>(
    _entities[4].properties[10],
  );

  /// See [KeyPairEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<KeyPairEntity>(
    _entities[4].properties[11],
  );
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[5].properties[0]);

  /// See [User.user_id].
  static final user_id = obx.QueryIntegerProperty<User>(
    _entities[5].properties[1],
  );

  /// See [User.username].
  static final username = obx.QueryStringProperty<User>(
    _entities[5].properties[2],
  );

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[5].properties[3]);

  /// See [User.email].
  static final email = obx.QueryStringProperty<User>(
    _entities[5].properties[4],
  );

  /// See [User.authToken].
  static final authToken = obx.QueryStringProperty<User>(
    _entities[5].properties[5],
  );

  /// See [User.emailVerifiedAt].
  static final emailVerifiedAt = obx.QueryDateProperty<User>(
    _entities[5].properties[6],
  );

  /// See [User.lastConnectionAt].
  static final lastConnectionAt = obx.QueryDateProperty<User>(
    _entities[5].properties[7],
  );

  /// See [User.createdAt].
  static final createdAt = obx.QueryDateProperty<User>(
    _entities[5].properties[8],
  );

  /// See [User.updatedAt].
  static final updatedAt = obx.QueryDateProperty<User>(
    _entities[5].properties[9],
  );
}
